1.Implement CPU Scheduling Algorithms: Shortest Job First.
Program:
#include<stdio.h>
struct process{
    char name[10];
    int bt,wt,ft,tat;
}p[10],temp;
int main(){
    int i,j,n,ttat=0,twt=0;
    float atat,awt;
    printf("Enter the number of processes:");
    scanf("%d",&n);
    for(i=0;i<n;i++) {
        printf("\nEnter the name of the process:");
        scanf("%s",p[i].name);
        printf("Enter the burst time of the %s process:",p[i].name);
        scanf("%d",&p[i].bt);
        printf("\n");
    }
    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if(p[i].bt>p[j].bt){
                temp=p[i];
                p[i]=p[j];
                p[j]=temp;
            }
        }
    }
    printf("Sorted order is:");
    for(i=0;i<n;i++)
        printf("    %s",p[i].name);
    for(i=0;i<n;i++){
        if(i==0){
            p[i].wt=0;
            p[i].ft=p[i].bt;
        }
        else{
            p[i].wt=p[i-1].bt+p[i-1].wt;
            p[i].ft=p[i].wt+p[i].bt;
        }
    }
    for(i=0;i<n;i++) {
        p[i].tat=p[i].ft;
        ttat=ttat+p[i].ft;
        twt=twt+p[i].wt;
    }
   atat=(float)ttat/n;
   awt=(float)twt/n;
   printf("\n\n");
   printf("p.name\t bt\t wt\t ft\t tat\n");
   printf("----------------------------------------------");
   printf("\n");
   for(i=0;i<n;i++){
   printf("  %s\t%d\t %d\t %d\t %d\t",p[i].name,p[i].bt,p[i].wt,p[i].ft,p[i].tat);
   printf("\n");
  }
   printf("\n\n\n");
   printf("The total turn around time is %d\n",ttat);
   printf("\nThe total waiting time is %d\n",twt);
   printf("\nThe average turn around time is %f\n",atat);
   printf("\nThe average waiting time is %f\n",awt);
 }
Input:
Initially, we will be entering no.of processes. And the for each process we need to enter process name and process burst time.

























To Implement CPU Scheduling Algorithms: First Come First Serve
PROGRAM:   
#include<stdio.h>
struct process
{
    char name[10];
intbt,wt,ft,tat,at;
}p[10],t;
void main()
{
inti,j,n,ttat=0,twt=0;
    float atat,awt;
printf("Enter the number of processes:");
scanf("%d",&n);
    for(i=0;i<n;i++)
    {
printf("\nEnter the name of the process:");
scanf("%s",p[i].name);
printf("Enter the burst time of the %s process:",p[i].name);
scanf("%d",&p[i].bt);
printf("Enter the arrival time of the %s process:",p[i].name);
scanf("%d",&p[i].at);
printf("\n");
    }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(p[i].at>p[j].at)
            {
                t=p[i];
                p[i]=p[j];
                p[j]=t;
            }
      }
    }
printf("Sorted order is:");
    for(i=0;i<n;i++)
    {
printf("\t%s",p[i].name);
    }
printf("\n");
    for(i=0;i<n;i++)
    {
        if(i==0)
        {
            p[i].ft=p[i].bt;
            p[i].wt=0;
            p[i].tat=p[i].bt+p[i].wt;
        }
        else
        {
            p[i].ft=p[i-1].ft+p[i].bt;
            p[i].wt=p[i-1].ft-p[i].at;
            p[i].tat=p[i].wt+p[i].bt;
        }
    }
    for(i=0;i<n;i++)
    {
ttat=ttat+p[i].tat;
twt=twt+p[i].wt;
    }
atat=(float)ttat/n;
awt=(float)twt/n;
printf("----------------------------------------------------------");
printf("\n| pro-name\tbt\tat\t ft\t wt\t tat\t|\n");
printf("----------------------------------------------------------\n");
    for(i=0;i<n;i++)
    {
printf("| %s\t\t%d\t %d\t %d\t %d\t %d\t|",p[i].name,p[i].bt,p[i].at,p[i].ft,p[i].wt,p[i].tat);
printf("\n----------------------------------------------------------");
printf("\n");
    }
printf("\n\nTotalturn around time is %d",ttat);
printf("\nTotal waiting time is %d",twt);
printf("\nAverageturn around time is %.2f",atat);
printf("\nAverage waiting time is %.2f",awt);
}
INPUT:
Initially, we will be entering no.of processes. And the for each process we need to enter process name, process burst time and process arrival time.






To Implement CPU Scheduling Algorithms: Priority Scheduling.
Program:
#include<stdio.h>
struct process
{
  char name[10];
  int bt,wt,ft,tat,pr;
}p[10],temp;
int main()
{
int i,j,n,ttat=0,twt=0;
float atat,awt;
printf("Enter the number of processes:");
scanf("%d",&n);
 for(i=0;i<n;i++)
{
  printf("\nEnter the name of the process:");
  scanf("%s",p[i].name);
  printf("Enter the burst time of the %s process: ",p[i].name);
  scanf("%d",&p[i].bt);
  printf("Enter the priority of the %s process :",p[i].name);
  scanf("%d",&p[i].pr);
}
  for(i=0;i<n;i++)
 {
   for(j=i+1;j<n;j++)
   {
      if(p[i].pr>p[j].pr)
     {
       temp=p[i];
       p[i]=p[j];
       p[j]=temp;
     }
   }
  }
   printf("Sorted order is:");
   for(i=0;i<n;i++)
   {
     printf("    %s",p[i].name);
   }
   printf("\n");
   for(i=0;i<n;i++)
   {
    if(i==0)
    {
     p[i].wt=0;
     p[i].ft=p[i].bt;
    }
    else
    {
      p[i].wt=p[i-1].bt+p[i-1].wt;
      p[i].ft=p[i].wt+p[i].bt;
    }
   }
   printf("\np.name\t bt\t wt\t ft\t tat\n");
   printf("----------------------------------------------");
   printf("\n");
   for(i=0;i<n;i++)
      p[i].tat=p[i].ft;
   for(i=0;i<n;i++)
  {
   printf("  %s\t%d\t %d\t %d\t %d\t",p[i].name,p[i].bt,p[i].wt,p[i].ft,p[i].tat);
   printf("\n");
  }
  for(i=0;i<n;i++)
  {
   printf("\nThe burst time of the process %s is %d",p[i].name,p[i].bt);
   printf("\nThe waiting time of the process %s is %d",p[i].name,p[i].wt);
   printf("\nThe finish time of the process %s is %d",p[i].name,p[i].ft);
   printf("\nThe turn around time of the process %s is %d",p[i].name,p[i].ft);
   printf("\n");
  }
   for(i=0;i<n;i++)
  {
   ttat=ttat+p[i].ft;
   twt=twt+p[i].wt;
  }
   atat=ttat/n;
   awt=twt/n;

   printf("\nThe total turn around time is %d",ttat);
   printf("\nThe total waiting time is %d",twt);
   printf("\nThe average turn around time is %f",atat);
   printf("\nThe average waiting time is %f",awt);
 }






To implement Round Robin CPU scheduling algorithm.
Program: 
#include<stdio.h>
struct process
{
    char name[10];
    int bt,ft,tat,wt,tft;
}p[10];
int main()
{
    int i,j=0,k=0,n,d,timeslice,ttat=0,tbt=0,twt=0;
    float avgwt,avgtat;
    printf("enter number of processes:");
    scanf("%d",&n);
    printf("enter time slice:");
    scanf("%d",&timeslice);
    for(i=0;i<n;i++)
    {
        printf("enter name of process %d :",i+1);
        scanf("%s",p[i].name);
        printf("enter burst time of process %d :",i+1);
        scanf("%d",&p[i].bt);
    }
    for(i=0;i<n;i++)
    {
        tbt=tbt+p[i].bt; p[i].tft=0;
        p[i].wt=0;
    }
    while(j<tbt)
    {
        for(i=0;i<n;i++)
        {
            if(p[i].bt>0)
            {
                if(p[i].bt<=timeslice)
                {
                    if(k==0&&i==0)
                        p[i].wt=0;
                    else
                    {
                        d=j-p[i].tft;
                        p[i].wt+=d;
                    }
                    j+=p[i].bt;
                    p[i].ft=j;
                    p[i].bt=0;
                }
                else
                {
                    if(k==0&&i==0)
                        p[i].wt=0;
                    else
                    {
                        d=j-p[i].tft;
                        p[i].wt+=d;
                    }
                    j+=timeslice; p[i].bt-=timeslice; p[i].tft=j;
                }
            }
        }
        k++;
    }
    for(i=0;i<n;i++)
    {
        printf("\n\n");
        printf("waiting time of process %s :%d\n",p[i].name,p[i].wt);
        printf("turn around time of process %s :%d\n",p[i].name,p[i].ft);
        printf("finish time of process %s :%d\n",p[i].name,p[i].ft);
    }
    printf("Processes  Waiting Time  Turn Around Time  Finish Time\n");
    printf("---------------------------------------------------------\n");
    for(i=0;i<n;i++)
    {
        printf("   %s \t\t%d\t\t  %d\t\t %d",p[i].name,p[i].wt,p[i].ft,p[i].ft);
        printf("\n");
    }
    for(i=0;i<n;i++)
    {
        ttat+=p[i].ft;
        twt+=p[i].wt;
    }
    avgwt=(float)twt/n; avgtat=(float)ttat/n;
    printf("Total turn around time:%d\n",ttat);
    printf("Total waiting time:%d\n",twt);
    printf("Avg turn around time:%f\n",avgtat);
    printf("Avg waiting time:%f\n",avgwt);
    return 0;
}
















To implement Memory Management I: First Fit
#include<stdio.h>
//#include<conio.h>
#include<stdlib.h>
struct process
{
 char name[20];
intsize,sadd,min,max;
}p[20];
struct hole
{
int name;
intmin,max,size;
}h[100],temp;
void main()
{
intm,tms,z,bs,d,condition,con,u,k,fs,ra,v;
intexfr=0,i=0, n=1,j=0;
 //clrscr();
printf("\nenter total memory size:");
scanf("%d",&tms);
printf("\n hole0 starting is :0");
printf("\n  hole0 ending is :%d",(tms-1));
 fs=tms;
 h[j].size=tms;
 h[j].min=0;
 h[j].max=tms-1;
  do
 {
i++;
printf("\nenter the process name:");
scanf("%s",p[i].name);
printf("\nenter the size of the %s process:",p[i].name);
scanf("%d",&p[i].size);
   //printf("the entered size is: %d",p[i].size);
   if(p[i].size<fs)
   {
     if(i==1)
     {
    m=h[j].max-p[i].size+1;
    //printf("the value of m is:%d",m);
    ra=rand();
 //    printf("random munber is :%d",ra);
    p[i].sadd=ra%m;
        //printf("the choice is :%d",(ra%m));
printf("the starting address is :%d",p[i].sadd);
    p[i].min=p[i].sadd;
    p[i].max=p[i].min+p[i].size-1;
printf("\ntheprocees %d min is: %d",i,p[i].min);
printf("\nthe process %d max is: %d",i,p[i].max);
    fs=m;
    printf("\nthe amount of free size availabe:%d",fs);
    if(m==p[i].sadd)
    {
     h[j].max=p[i].sadd-1;
     h[j].size=h[j].max-h[j].min+1;
    //printf("\nthe hole %d  min is: %d",j,h[j].min);
      //printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    }
    else if(p[i].sadd==h[j].min)
    {
     h[j].min=p[i].max+1;
     h[j].size=h[j].max-h[j].min+1;
//    printf("\nthe hole %d  min is: %d",j,h[j].min);
   //   printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    }
    else
    {
     h[j+1].min=p[i].max+1;
     h[j+1].max=h[j].max;
     h[j].max=p[i].sadd-1;
     h[j].size=h[j].max-h[j].min+1;
     h[j+1].size=h[j+1].max-h[j+1].min+1;
     n=n+1;
    //printf("\nthe hole %d  min is: %d",j,h[j].min);
        //printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d  min is: %d",j+1,h[j+1].min);
        //printf("\nthe hole %d max is: %d",j+1,h[j+1].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    //printf("\nthe hole %d size is: %d",j+1,h[j+1].size);
    }
    }
      else
      {
       k=0;
        do
       {
        if(h[k].size>=p[i].size)
    {
     p[i].min=h[k].min;
     p[i].max=p[i].min+p[i].size-1;
     h[k].min=p[i].max+1;
         h[k].size=h[k].size-p[i].size;
     fs=fs-p[i].size;
    printf("\ntheprocees %d min is: %d",i,p[i].min);
printf("\nthe process %d max is: %d",i,p[i].max);
    condition=1;
    }
    else
    {
printf("\nthe hole %d  is not sufficeient because its size is %d",k,h[k].size);
     k=k+1;
     condition=0;
         //printf("\n the value of k is %d",k);
    }
}while(k<n&&condition==0);
      }
   }
   else
   {
i=i-1;
printf("\nmemory allocation is not possible ");
   }
   for(u=0;u<n;u++)
              {
            printf("\nthe hole %d  min is: %d",u,h[u].min);
printf("\nthe hole %d max is: %d",u,h[u].max);
printf("\nthe hole %d size now is%d",u,h[u].size);
              }

   if(k==n&&condition==0)
   {
printf("\n unable to allocate the memory due to external fragmentation");
    con=2;
   }
   if (con!=2)
   {
    printf("\ndo you want to enter the another process1:enter 0:Noneed");
scanf("%d",&con);
   }
}while(con==1);
printf("\n\tpname\tpmin\tpmax");
   if(con==2)
   {
    for(z=1;z<i;z++)
    {
printf("\n\t%s \t%d \t%d \n", p[z].name, p[z].min, p[z].max  );
    }
    for(k=0;k<n;k++)
   {
exfr=exfr+h[k].size;
   }
printf("external fragmentation is %d:",exfr);
 }
if(con==0)
   {
    for(z=1;z<i+1;z++)
    {
printf("\n\t%s \t%d \t%d \n", p[z].name, p[z].min, p[z].max  );
    }
 }
}































To implement Memory Management I: Best Fit
#include<stdio.h>
//#include<conio.h>
#include<stdlib.h>
struct process
{
 char name[20];
intsize,sadd,min,max;
}p[20];
struct hole
{
int name;
intmin,max,size;
}h[100],temp;
void main()
{
intm,tms,z,bs,d,condition,con,u,k,fs,ra,v;
intexfr=0,i=0, n=1,j=0;
 //clrscr();
printf("\nenter total memory size:");
scanf("%d",&tms);
printf("\n hole0 starting is :0");
printf("\n  hole0 ending is :%d",(tms-1));
 fs=tms;
 h[j].size=tms;
 h[j].min=0;
 h[j].max=tms-1;
  do
 {
i++;
printf("\nenter the process name:");
scanf("%s",p[i].name);
printf("\nenter the size of the %s process:",p[i].name);
scanf("%d",&p[i].size);
   //printf("the entered size is: %d",p[i].size);
   if(p[i].size<fs)
   {
     if(i==1)
     {
    m=h[j].max-p[i].size+1;
    //printf("the value of m is:%d",m);
    ra=rand();
 //    printf("random munber is :%d",ra);
    p[i].sadd=ra%m;
        //printf("the choice is :%d",(ra%m));
printf("the starting address is :%d",p[i].sadd);
    p[i].min=p[i].sadd;
    p[i].max=p[i].min+p[i].size-1;
printf("\ntheprocees %d min is: %d",i,p[i].min);
printf("\nthe process %d max is: %d",i,p[i].max);
    fs=m;
    printf("\nthe amount of free size availabe:%d",fs);
    if(m==p[i].sadd)
    {
     h[j].max=p[i].sadd-1;
     h[j].size=h[j].max-h[j].min+1;
    //printf("\nthe hole %d  min is: %d",j,h[j].min);
      //printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    }
    else if(p[i].sadd==h[j].min)
    {
     h[j].min=p[i].max+1;
     h[j].size=h[j].max-h[j].min+1;
//    printf("\nthe hole %d  min is: %d",j,h[j].min);
   //   printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    }
    else
    {
     h[j+1].min=p[i].max+1;
     h[j+1].max=h[j].max;
     h[j].max=p[i].sadd-1;
     h[j].size=h[j].max-h[j].min+1;
     h[j+1].size=h[j+1].max-h[j+1].min+1;
     n=n+1;
    //printf("\nthe hole %d  min is: %d",j,h[j].min);
        //printf("\nthe hole %d max is: %d",j,h[j].max);
    //printf("\nthe hole %d  min is: %d",j+1,h[j+1].min);
        //printf("\nthe hole %d max is: %d",j+1,h[j+1].max);
    //printf("\nthe hole %d size is: %d",j,h[j].size);
    //printf("\nthe hole %d size is: %d",j+1,h[j+1].size);
    }
    }
      else
      {
       k=0;
        do
       {
        if(h[k].size>=p[i].size)
    {
     p[i].min=h[k].min;
     p[i].max=p[i].min+p[i].size-1;
     h[k].min=p[i].max+1;
         h[k].size=h[k].size-p[i].size;
     fs=fs-p[i].size;
    printf("\ntheprocees %d min is: %d",i,p[i].min);
printf("\nthe process %d max is: %d",i,p[i].max);
    condition=1;
    }
    else
    {
printf("\nthe hole %d  is not sufficeient because its size is %d",k,h[k].size);
     k=k+1;
     condition=0;
         //printf("\n the value of k is %d",k);
    }
}while(k<n&&condition==0);
      }
   }
   else
   {
i=i-1;
printf("\nmemory allocation is not possible ");
   }
   for(u=0;u<n;u++)
              {
            printf("\nthe hole %d  min is: %d",u,h[u].min);
printf("\nthe hole %d max is: %d",u,h[u].max);
printf("\nthe hole %d size now is%d",u,h[u].size);
              }
         for(u=0;u<n-1;u++)
         {
             if(h[u].size>h[u+1].size)
               {
                temp=h[u+1];
                h[u+1]= h[u];
                  h[u]=temp;
              }
            }
            for(u=0;u<n;u++)
              {
            printf("\naftersortingthe hole %d  min is: %d",u,h[u].min);
printf("\n after sorting the hole %d max is: %d",u,h[u].max);
printf("\nafter sorting the hole %d size now is%d",u,h[u].size);
              }
   if(k==n&&condition==0)
   {
printf("\n unable to allocate the memory due to external fragmentation");
    con=2;
   }
   if (con!=2)
   {
    printf("\ndo you want to enter the another process1:enter 0:Noneed");
scanf("%d",&con);
   }
}while(con==1);
printf("\n\tpname\tpmin\tpmax");
   if(con==2)
   {
    for(z=1;z<i;z++)
    {
printf("\n\t%s \t%d \t%d \n", p[z].name, p[z].min, p[z].max  );
    }
    for(k=0;k<n;k++)
   {
exfr=exfr+h[k].size;
   }
printf("external fragmentation is %d:",exfr);
 }
if(con==0)
   {
    for(z=1;z<i+1;z++)
    {
printf("\n\t%s \t%d \t%d \n", p[z].name, p[z].min, p[z].max  );
    }
 }
}

















To implement Memory Management Scheme-II: FIFO
#include<stdio.h>
struct page
{
intname,time,frequency;
}p[100];
struct frame
{
intname,time,frequency;
}f[100],temp;
void main()
{
int count=0,clock=0,nf,j,n,h,i,s,l,k=0,pagefault=0;
printf("enter the number of frames in physical memory:");
scanf("%d",&nf);
printf("enter the number of pages in memory reference string:");
scanf("%d",&n);
    for(i=1;i<=nf;i++)
        f[i].name=-1;
printf("enter the memory reference string:(0-9 only)\n");
    for(i=1;i<=n;i++)
    {
printf("m%d:",i);
scanf("%d",&p[i].name);
    }
i=0;
    while(count<n)
    {
i++;
        count++;
        k=0;
        if(i<=nf)
        {
            if(i==1)
            {
                 clock=clock+1;
                 f[i].name=p[count].name;
                 f[i].time=clock;
                 f[i].frequency=1;
pagefault=pagefault+1;
            }
        else
            {
                for(j=1;j<=nf;j++)
                {
                    if(f[j].name==p[count].name)
                    {
                        j=i;
                        k=1;
                    }
                }
                if(k==0)
                {
                    clock=clock+1;
                    f[i].name=p[count].name;
                    f[i].time=clock;
                    f[i].frequency=1;
pagefault=pagefault+1;
                }
                if(k==1)
                {
                    clock=clock+1;
i=i-1;
                }
            }
        }
        else
        {
            for(s=2;s<=nf;s++)
            {
                for(l=1;l<s;l++)
                {
                    if(f[l].time>f[s].time)
                    {
                        temp=f[l];
                        f[l]=f[s];
                        f[s]=temp;
                    }
                }
            }
            for(j=1;j<=nf;j++)
            {
                if(f[j].name==p[count].name)
                {
                    j=i;
                    k=1;
                }
            }
            if(k==0)
            {
                clock=clock+1;
                f[1].name=p[count].name;
                f[1].time=clock;
                f[1].frequency=1;
                pagefault=pagefault+1;
            }
            if(k==1)
            {
                clock=clock+1;
i=i-1;
            }
        }
printf("\nPages in frames are::");
        if(k==1)
printf("page fault is not occured");
        else
        {
            for(h=1;h<=nf;h++)
            {
printf("%d\t",f[h].name);
            }
        }
    };
printf("\n\nAt end of memory stream the pages in frames are::");
    for(i=1;i<=nf;i++)
    {
printf("page%d\t",f[i].name);
    }
printf("\n\nThe total pagefaults for given memory reference string are::%d",pagefault);
}
To implement Memory Management Scheme-II: LRU
#include<stdio.h>
struct page
{
intname,time,frequency;
}p[100];
struct frame
{
intname,time,frequency;
}f[100],temp;
void main()
{
int count=0,clock=0,nf,j,n,h,i,z,s,l,k=0,pagefault=0;
printf("enter the number of frames in physical memory:");
scanf("%d",&nf);
printf("enter the number of pages in memory reference string:");
scanf("%d",&n);
    for(i=1;i<=nf;i++)
        f[i].name=-1;
printf("enter the memory reference string:(0-9 only)\n");
    for(i=1;i<=n;i++)
    {
printf("m%d:",i);
scanf("%d",&p[i].name);
    }
i=0;
    while(count<n)
    {
i++;
        count++;
        k=0;
        if(i<=nf)
        {
            if(i==1)
            {
                clock=clock+1;
                f[i].name=p[count].name;
                f[i].time=clock;
                f[i].frequency=1;
pagefault=pagefault+1;
            }
        else
            {
                for(j=1;j<=nf;j++)
                {
                    if(f[j].name==p[count].name)
                    {
                        z=j;
                        j=i;
                        k=1;
                    }
                }
                if(k==0)
                {
                    clock=clock+1;
                    f[i].name=p[count].name;
                    f[i].time=clock;
                    f[i].frequency=1;
pagefault=pagefault+1;
                }
                if(k==1)
                {
                    clock=clock+1;
                    f[z].time=clock;
i=i-1;
                }
            }
        }
        else
        {
            for(s=2;s<=nf;s++)
            {
                for(l=1;l<s;l++)
                {
                    if(f[l].time>f[s].time)
                    {
                        temp=f[l];
                        f[l]=f[s];
                        f[s]=temp;
                    }
                }
            }
            for(j=1;j<=nf;j++)
            {
                if(f[j].name==p[count].name)
                {
                     z=j;
                     j=i;
                     k=1;
                }
            }
    if(k==0)
            {
    clock=clock+1;
        f[1].name=p[count].name;
        f[1].time=clock;
        f[1].frequency=1;
        pagefault=pagefault+1;
            }
    if(k==1)
            {
                clock=clock+1;
                f[z].time=clock;
i=i-1;
i=i-1;
            }
        }
printf("\nPages in frames are:: ");
        if(k==1)
printf("page fault is not occured");
        else
        {
            for(h=1;h<=nf;h++)
            {
printf("%d  ",f[h].name);
            }
        }
    };
printf("\n\nAt end of memory stream the pages in frames are::");
    for(i=1;i<=nf;i++)
printf("page%d\t",f[i].name);
printf("\n\nThe total pagefaults for given memory reference string are::%d",pagefault);
    return 0;
}










To Implement Banker’s Algorithm for deadlock Avoidance.
#include<stdio.h>
intmain()
{
intpid[10],allocation[10][10],a[5],max[10][10], req[10][10],need[10][10],available[10],finish[10],work[10],safeseq[10],n,m,t=0,i=0,j=0,k=0,noproc=0,rtype=0,flag=0,x=0,tallocation[10][10], tneed[10][10],tavailable[10],tmax[10][10],enter,re,nre,ne,av;
printf("enter number of resource types:");
scanf("%d",&m);
printf("enter the max instances of each resource type:");
for(i=0;i<m;i++)
scanf("%d",&available[i]);
printf("enter number of processes:");
scanf("%d",&n);
printf("enter the max matrix of process:");
for(i=0;i<n;i++)
for(j=0;j<m;j++)
scanf("%d",&max[i][j]);
printf("enter the allocation matrix:");
for(i=0;i<n;i++)
for(j=0;j<m;j++)
{
scanf("%d",&allocation[i][j]);
 if(allocation[i][j]<=max[i][j])
 x++;
}
for(j=0;j<m;j++)
{
a[j]=0;
for(i=0;i<n;i++)
a[j]=a[j]+allocation[i][j];
}
for(i=0;i<m;i++)
printf("\nallocated instances of %d resource type=%d",i,a[i]);
for(i=0;i<m;i++)
{
if(a[i]<=available[i])
t++;
}
for(i=0;i<m;i++)
available[i]=available[i]-a[i];
for(i=0;i<m;i++)
printf("\navailable instances of %d resource type=%d",i,available[i]);
if(t==m && x==(n*m))
{
for(i=0;i<n;i++)
 {
   for(j=0;j<m;j++)
   {
     need[i][j]=max[i][j]-allocation[i][j];
   }
  }
   for(i=0;i<m;i++)
tavailable[i]=available[i];
   for(i=0;i<n;i++)
 {
   for(j=0;j<m;j++)
   {
tneed[i][j]=need[i][j];
tallocation[i][j]=allocation[i][j];
tmax[i][j]=max[i][j];
   }
  }
do
{
k=0;
for(i=0;i<m;i++)
work[i]=available[i];
for(i=0;i<n;i++)
finish[i]=0;
noproc=n;
while(noproc)
{
   for(i=0;i<n;i++)
  {
rtype=0;
    for(j=0;j<m;j++)
    {
       if(need[i][j]<=work[j])
rtype++;
    }
 if(rtype==m&&finish[i]==0)
 {
    for(j=0;j<m;j++)
   work[j]=work[j]+allocation[i][j];
  finish[i]=1;
safeseq[k]=i;
   k++;
}
}
noproc--;
}
for(i=0;i<n;i++)
{
   if(finish[i]==0)
   flag=1;
 }
if(flag==1)
{
  available[re]=tavailable[re];
  allocation[nre][re]=tallocation[nre][re];
  need[nre][re]=tneed[nre][re];
printf("\nthere is no safe seq for the current resource allocation state");
printf("\nso there is a possibility for deadlock");
}
else
{
printf("\n the safe sequence is");
for(i=0;i<k;i++)
printf("p%d,",safeseq[i]);
printf(".\n,");
}
printf("\nif you want to request the resources for the process press 1:");
scanf("%d",&enter);
if(enter==1)
{
  ne=0;
av=0;
printf("enter the  process  that is requesting :");
scanf("%d",&nre);
printf("enter the  resource instances:");
  for(j=0;j<m;j++)  scanf("%d",&req[nre][j]);
  for(j=0;j<m;j++)
  {
    if(req[nre][j]<=need[nre][j])
     ne++;
  }
   for(j=0;j<m;j++)
  {
    if(req[nre][j]<=available[j])
av++;
  }
  if(ne==m)
{
   if(av==m)
 {
      for(i=0;i<m;i++)
tavailable[i]=available[i];
   for(i=0;i<n;i++)
 {
   for(j=0;j<m;j++)
   {
tneed[i][j]=need[i][j];
tallocation[i][j]=allocation[i][j];
tmax[i][j]=max[i][j];
   }
  }
      for(j=0;j<m;j++)
      {available[j]=available[j]-req[nre][j];
       allocation[nre][j]=allocation[nre][j]+req[nre][j];
      need[nre][j]=need[nre][j]-req[nre][j];  }
  } else{printf("there is no safe sequence, resources are not available and process has to wait "); enter=0; }
}
else{
enter=0;
printf("\nprocess has exceed its maximum limit"); }
}
}while(enter==1);
}
else
{
if(t!=m)
printf("\nallocation is more than available, safe seq is not possible");
else
printf("\nallocation is more than max, safe seq is not possible");
}
}